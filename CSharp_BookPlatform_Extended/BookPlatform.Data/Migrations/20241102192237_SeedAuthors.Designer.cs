// <auto-generated />
using System;
using BookPlatform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookPlatform.Data.Migrations
{
    [DbContext(typeof(PlatformDbContext))]
    [Migration("20241102192237_SeedAuthors")]
    partial class SeedAuthors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserApplicationUser", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "FriendsId");

                    b.HasIndex("FriendsId");

                    b.ToTable("ApplicationUserApplicationUser");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First or only name of the author");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First or only name of the author");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last or only name of the author");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bf03ffc-89a6-448f-9036-8d206171ad3b"),
                            FullName = "Chinua Achebe",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3edc7ed9-edcc-4a0e-837a-521ce3e618f9"),
                            FullName = "Hans Christian Andersen",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("38b02682-deba-4ad0-9fe8-22c8415f39bc"),
                            FullName = "Dante Alighieri",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8f7f3912-ce99-434f-a23d-8fa5b848acb8"),
                            FullName = "Unknown",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("bc851c3a-6ffa-4b74-bd8e-36ba2b04d4fb"),
                            FullName = "Jane Austen",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ca4895a4-5aad-4355-975a-efbdd1ff1715"),
                            FullName = "Honoré de Balzac",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("417665f7-0684-4482-a1ab-a0ee3f067686"),
                            FullName = "Samuel Beckett",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("076f8fc2-9e07-48bf-ade1-1941f6113b5b"),
                            FullName = "Giovanni Boccaccio",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("de81ae05-a296-450b-aaa9-61d04448930e"),
                            FullName = "Jorge Luis Borges",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e09e0cf4-f001-49b2-8486-698c970991d3"),
                            FullName = "Emily Brontë",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7bc3ef5d-ab75-4ce5-bd2d-efe7de0d3ca8"),
                            FullName = "Albert Camus",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("71b9c979-95a7-4e58-94b2-505c631d8ea2"),
                            FullName = "Paul Celan",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f7df9789-4cd7-49d3-af01-ebe6707b138a"),
                            FullName = "Louis-Ferdinand Céline",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("eadcdc57-979f-4278-8f3f-0d154a09abed"),
                            FullName = "Miguel de Cervantes",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("893b9552-f04d-482a-9323-b030158aafc6"),
                            FullName = "Geoffrey Chaucer",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("84a58da6-15d5-4838-8df8-1bf9708c17bc"),
                            FullName = "Anton Chekhov",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59634636-8af4-4dd7-82fa-bc17043cb4f1"),
                            FullName = "Joseph Conrad",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1b2206de-ba2a-4aae-9ef0-31ec64ea5afb"),
                            FullName = "Charles Dickens",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2b0bbb19-1bbd-4234-a2d4-66ad540efbe6"),
                            FullName = "Denis Diderot",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2cbfec6b-6179-42f3-b1fa-4a95cc4acfa8"),
                            FullName = "Alfred Döblin",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("fbec15ce-53b0-442a-97f7-9dd03d6a43c2"),
                            FullName = "Fyodor Dostoevsky",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("6633bdb4-35c2-4294-b15e-3ddd8595b0ae"),
                            FullName = "George Eliot",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4e516a05-f82f-4584-81db-667f065c70b1"),
                            FullName = "Ralph Ellison",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5e1894d2-dc95-4cdc-b378-4882c4da7808"),
                            FullName = "Euripides",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("4a3c1349-f3b8-470d-a7b4-825b54132965"),
                            FullName = "William Faulkner",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("32366d19-9aae-4189-80a4-1020fb23d59e"),
                            FullName = "Gustave Flaubert",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ef7c9244-7559-4fc9-a42b-6c1f6050a236"),
                            FullName = "Federico García Lorca",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("da83a1a0-6d2d-431d-9fd0-05d7b13b3f79"),
                            FullName = "Gabriel García Márquez",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5530e7d3-65f2-4af9-b83c-2dc2f77b4bbf"),
                            FullName = "Johann Wolfgang von Goethe",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("351859cf-a79c-4961-be84-5bf1ab8441fe"),
                            FullName = "Nikolai Gogol",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("90d3e8d2-28e9-46fc-8ba5-12816eaecc6d"),
                            FullName = "Günter Grass",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("3eeab217-e009-478b-928e-993ce447d9f3"),
                            FullName = "João Guimarães Rosa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("be5885ea-c04f-4c48-91a4-31d9bba8d2c2"),
                            FullName = "Knut Hamsun",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b28d9964-eabe-4a33-911e-a861b6b71a70"),
                            FullName = "Ernest Hemingway",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a714c1c6-1705-478f-8231-b293e111995e"),
                            FullName = "Homer",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("43a94ab0-4457-4ef3-b31f-50d9acd71b09"),
                            FullName = "Henrik Ibsen",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9e5b1956-e4cc-4de8-8316-0fbe83c9c2e5"),
                            FullName = "James Joyce",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("523c7a9d-d6d5-42a1-bbb4-d23f79bc55d7"),
                            FullName = "Franz Kafka",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("8e887eb6-fec4-4d2b-98ea-9b4b31ed519d"),
                            FullName = "Kālidāsa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("7f09a98a-b777-4a87-b31f-77696dac5c12"),
                            FullName = "Yasunari Kawabata",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c264ed2e-b98f-4f00-b055-65a327f1b2e0"),
                            FullName = "Nikos Kazantzakis",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b8894cea-2e38-4713-8b97-06d7bbf9c8aa"),
                            FullName = "D. H. Lawrence",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ce5f3664-f332-4bcd-a7f9-b413733e94dc"),
                            FullName = "Halldór Laxness",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ddf5c81b-6351-48c0-863d-adab65acaefc"),
                            FullName = "Giacomo Leopardi",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("af7982e7-da2d-4bc2-a5aa-968752029299"),
                            FullName = "Doris Lessing",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("346fbc5c-82b0-4d34-87b2-65d516c7f274"),
                            FullName = "Astrid Lindgren",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("af0828c7-f49e-4d1b-a888-4e06335dcd04"),
                            FullName = "Lu Xun",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("d556a20d-6dba-4494-b0ec-ae2e82eacf3b"),
                            FullName = "Naguib Mahfouz",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5eb629c4-bdba-4fb7-9242-96028af47077"),
                            FullName = "Thomas Mann",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("96948e9f-b9a2-48a1-b614-92c08a8b3b4c"),
                            FullName = "Herman Melville",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5f9b01b2-714a-4254-a039-d7cbb282bf2a"),
                            FullName = "Michel de Montaigne",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a20b0c8f-e2cc-4b5b-85f2-c3a570796e74"),
                            FullName = "Elsa Morante",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ab273ba4-c96c-4092-81c1-750ee3c71dbb"),
                            FullName = "Toni Morrison",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("95d41a49-4a3b-478a-8694-a7a159eda369"),
                            FullName = "Murasaki Shikibu",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("142c9661-d2ff-4f9a-83aa-dabfca26ed61"),
                            FullName = "Robert Musil",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("72ea3019-fe4b-4c2c-b919-fc07334c0c3f"),
                            FullName = "Vladimir Nabokov",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("711ca5c9-304c-47e5-b0a1-357680251fdf"),
                            FullName = "George Orwell",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ba51caa3-77fe-43b7-ba2e-d78b13cfafc2"),
                            FullName = "Ovid",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ecad5f48-371a-4a60-8e5e-bbf03347c2a3"),
                            FullName = "Fernando Pessoa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("783bbacc-bc65-470e-a53e-86869c61698c"),
                            FullName = "Edgar Allan Poe",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("0dbd3d1e-2de5-4ae7-a588-3916c90caac4"),
                            FullName = "Marcel Proust",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("67dc59ad-3ff7-4906-bd38-f35f593e1c61"),
                            FullName = "François Rabelais",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ec43876e-7cac-436c-a115-55642490e19b"),
                            FullName = "Juan Rulfo",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("dbe21766-6473-4ed9-a130-17efc9f55310"),
                            FullName = "Rumi",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("b13f8b26-6a6e-4574-a2bc-ae28caf99124"),
                            FullName = "Salman Rushdie",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("a3d4426f-67f8-43b1-8901-750bcea04e20"),
                            FullName = "Saadi",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9970c321-7e1b-45ca-a241-b8e04b34575e"),
                            FullName = "Tayeb Salih",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("378e776a-6fff-4886-ba19-89b6bb2ac6e6"),
                            FullName = "José Saramago",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("16ba9d4a-24bf-4989-83fa-91559d10db0d"),
                            FullName = "William Shakespeare",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("25ab0068-0a2e-4c0d-ac88-2761e4a7e528"),
                            FullName = "Sophocles",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("13b6a375-94a1-448b-a852-9c417d64219e"),
                            FullName = "Stendhal",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("63f316b6-af65-42b5-ba02-0df18b618cdb"),
                            FullName = "Laurence Sterne",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("00d4bd5a-1c59-47f4-82f8-f40640a0b59a"),
                            FullName = "Italo Svevo",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("72a2ed8d-354a-47b5-9219-d386ff5844d6"),
                            FullName = "Jonathan Swift",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c3a5174b-5a8a-4076-9a6f-3b2eda4744ba"),
                            FullName = "Leo Tolstoy",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c6d892db-d741-42a6-a4e4-d23fcc4c4739"),
                            FullName = "Mark Twain",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2529db97-63f5-47fb-be8c-572ef70cf006"),
                            FullName = "Valmiki",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("1e1c7dc3-b968-4512-9893-6ab74ca995f9"),
                            FullName = "Virgil",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("ae2bd410-b110-40c4-b56f-31be18fc1923"),
                            FullName = "Vyasa",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("9c15c4e2-d17e-4311-92f2-42035e3db1ef"),
                            FullName = "Walt Whitman",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("63fae9d7-bd92-4afa-930d-80377f54cbbc"),
                            FullName = "Virginia Woolf",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("5da48cec-1f36-4666-921d-43b90357226f"),
                            FullName = "Marguerite Yourcenar",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float")
                        .HasComment("Average rating based on users' ratings");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Book description");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasComment("Book cover image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int")
                        .HasComment("Official known first publication year of the book");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Full title of the book");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookApplicationUser", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User's favourite character from the book - optional");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2")
                        .HasComment("Date on which the user finished reading");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("datetime2")
                        .HasComment("Date on which the user started reading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int")
                        .HasComment("Optional user rating");

                    b.Property<int>("ReadingStatusId")
                        .HasColumnType("int")
                        .HasComment("Current reading status");

                    b.HasKey("BookId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RatingId");

                    b.HasIndex("ReadingStatusId");

                    b.ToTable("BooksApplicationUsers");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookCharacter", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("BooksCharacters");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of the character");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the genre");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The book the quote is from");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("The body of the quote");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation in the database");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.QuoteApplicationUser", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuoteId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("QuotesApplicationUsers");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key and numeric value of the rating");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RatingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Descriptive value of the rating");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatingDescription = "Barely finished it, if at all"
                        },
                        new
                        {
                            Id = 2,
                            RatingDescription = "Not much to enjoy/ learn"
                        },
                        new
                        {
                            Id = 3,
                            RatingDescription = "Good parts are good, bad parts are bad"
                        },
                        new
                        {
                            Id = 4,
                            RatingDescription = "Would definitely recommend/ reread"
                        },
                        new
                        {
                            Id = 5,
                            RatingDescription = "Absolutely amazing"
                        });
                });

            modelBuilder.Entity("BookPlatform.Data.Models.ReadingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key and numeric value of the status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Descriptive value of the status");

                    b.HasKey("Id");

                    b.ToTable("ReadingStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusDescription = "Read"
                        },
                        new
                        {
                            Id = 2,
                            StatusDescription = "Currently Reading"
                        },
                        new
                        {
                            Id = 3,
                            StatusDescription = "Want to Read"
                        });
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user who created the review");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The book the review is about");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The body of the review");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation in the database");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasComment("Number of likes");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last modification in the database");

                    b.HasKey("Id");

                    b.HasIndex("BookId", "ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserApplicationUser", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Book", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookApplicationUser", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBooks")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Book", "Book")
                        .WithMany("BookApplicationUsers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Character", "Character")
                        .WithMany("CharacterBookApplicationUsers")
                        .HasForeignKey("CharacterId");

                    b.HasOne("BookPlatform.Data.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.HasOne("BookPlatform.Data.Models.ReadingStatus", "ReadingStatus")
                        .WithMany()
                        .HasForeignKey("ReadingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Book");

                    b.Navigation("Character");

                    b.Navigation("Rating");

                    b.Navigation("ReadingStatus");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookCharacter", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.Book", "Book")
                        .WithMany("BookCharacters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Character", "Character")
                        .WithMany("CharacterBooks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Quote", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.Book", "Book")
                        .WithMany("Quotes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.QuoteApplicationUser", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserQuotes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Quote", "Quote")
                        .WithMany("QuoteApplicationUsers")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Review", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.BookApplicationUser", "BookApplicationUser")
                        .WithOne("Review")
                        .HasForeignKey("BookPlatform.Data.Models.Review", "BookId", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPlatform.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserBooks");

                    b.Navigation("UserQuotes");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Book", b =>
                {
                    b.Navigation("BookApplicationUsers");

                    b.Navigation("BookCharacters");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookApplicationUser", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Character", b =>
                {
                    b.Navigation("CharacterBookApplicationUsers");

                    b.Navigation("CharacterBooks");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Quote", b =>
                {
                    b.Navigation("QuoteApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
