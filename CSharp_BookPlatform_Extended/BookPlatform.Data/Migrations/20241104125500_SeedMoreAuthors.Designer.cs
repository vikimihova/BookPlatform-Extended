// <auto-generated />
using System;
using BookPlatform.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookPlatform.Data.Migrations
{
    [DbContext(typeof(PlatformDbContext))]
    [Migration("20241104125500_SeedMoreAuthors")]
    partial class SeedMoreAuthors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserApplicationUser", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "FriendsId");

                    b.HasIndex("FriendsId");

                    b.ToTable("ApplicationUserApplicationUser");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("First or only name of the author");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("First or only name of the author");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmittedByUser")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Last or only name of the author");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fffafc05-aeb9-450d-b27b-b3b4b92a0d4d"),
                            FullName = "Chinua Achebe",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("03999b94-b555-4c99-9614-6604576fb11f"),
                            FullName = "Hans Christian Andersen",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("c6f4f541-6d5c-4fb6-bc74-f2a26d03e7c0"),
                            FullName = "Dante Alighieri",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("e00c4a94-045f-4921-98be-e58c6e6e7827"),
                            FullName = "Unknown",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("51717429-e61d-4e99-87a0-a6f4977979b3"),
                            FullName = "Jane Austen",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("ba1a41ba-d43e-4fe4-8cd6-8e2b3cb4e0ec"),
                            FullName = "Honoré de Balzac",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("2e6af862-bf5c-486e-ba1f-ab6289500526"),
                            FullName = "Samuel Beckett",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("543b212b-1be0-4536-810f-8b724e5c1145"),
                            FullName = "Giovanni Boccaccio",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("c48ecdc4-d0e5-40d5-ab5c-1ebe64676681"),
                            FullName = "Jorge Luis Borges",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("a72d1257-ee68-402c-9b89-9adae0b89875"),
                            FullName = "Emily Brontë",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("2e065f61-7fe7-43b8-9c7c-d98d15f1469d"),
                            FullName = "Albert Camus",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("85446113-6f3b-4844-b986-313dcdcf0e46"),
                            FullName = "Paul Celan",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("1ba0d789-60ac-4301-b748-a932f3eafcac"),
                            FullName = "Louis-Ferdinand Céline",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("caf6affa-3ebf-4e66-b54f-bda1cc41e3b0"),
                            FullName = "Miguel de Cervantes",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("6b2a21f8-1aaf-4c80-adf8-2fe78b13d5d4"),
                            FullName = "Geoffrey Chaucer",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("7f3465be-ccf8-492b-9e71-65d5cfee6cbb"),
                            FullName = "Anton Chekhov",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("08280cc9-3b18-46fe-9daa-c5f63c2a4bfd"),
                            FullName = "Joseph Conrad",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("4a0b3917-56f9-481f-8207-5b95c9d66d0b"),
                            FullName = "Charles Dickens",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("91c4f2a6-8b65-4ab6-817d-c5d7df909293"),
                            FullName = "Denis Diderot",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("b5e82218-6746-4eee-a9df-e5788b43ae2a"),
                            FullName = "Alfred Döblin",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("cb88244d-f646-431c-8d1a-1f26c5f4c763"),
                            FullName = "Fyodor Dostoevsky",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("903275a0-f1e5-43df-b733-e9033ff47da8"),
                            FullName = "George Eliot",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("6b381fd8-0586-4ae7-b32d-74be21dd499f"),
                            FullName = "Ralph Ellison",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("d55d891e-67e2-46f7-a5c1-1e8580ba6624"),
                            FullName = "Euripides",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("34034575-e90c-42e2-9609-47cfcc32867c"),
                            FullName = "William Faulkner",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("81f60cb8-24e9-4b6a-8b42-5c201685b8f7"),
                            FullName = "Gustave Flaubert",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("26a7a0d8-2642-436f-85c5-97105564aa3b"),
                            FullName = "Federico García Lorca",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("6493dea5-2976-4495-9c38-9054b177c014"),
                            FullName = "Gabriel García Márquez",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("437c5af6-d832-4a17-b5f8-fc58ff353a1b"),
                            FullName = "Johann Wolfgang von Goethe",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("80861939-7139-41fd-bb49-9bbb46eccd7c"),
                            FullName = "Nikolai Gogol",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("50aaf6a5-cc2f-4b3a-ae6d-4c2d8a8d4345"),
                            FullName = "Günter Grass",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("d0ba348e-e67a-4f6b-b386-278c2a113fe1"),
                            FullName = "João Guimarães Rosa",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("d227dbcc-7865-4755-9dea-c0799ffb58c7"),
                            FullName = "Knut Hamsun",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("664db420-515a-4a40-8b60-25d2ab0fcdf0"),
                            FullName = "Ernest Hemingway",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("5d0a653d-cdb1-4af7-a3c8-744db00454fe"),
                            FullName = "Homer",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("f022d88f-e812-427e-b4f5-087b002d10a2"),
                            FullName = "Henrik Ibsen",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("6251bd75-a73d-46e0-b488-2431a7204e01"),
                            FullName = "James Joyce",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("7fd161ef-ce76-44e5-8cc8-d827b87c35fd"),
                            FullName = "Franz Kafka",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("d88a6abf-03b0-4a01-b0c5-938a926d7ac8"),
                            FullName = "Kālidāsa",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("e472606b-b39f-49e7-8777-622f3792dccf"),
                            FullName = "Yasunari Kawabata",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("a544cf63-7c21-44ba-a3d1-8de4ba179eeb"),
                            FullName = "Nikos Kazantzakis",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("c936f129-ee96-4a6d-a040-18b3a1113bac"),
                            FullName = "D. H. Lawrence",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("38201b6f-4feb-49ad-9a8c-62903f263b31"),
                            FullName = "Halldór Laxness",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("2c884fda-240a-4004-b652-ada0225959a3"),
                            FullName = "Giacomo Leopardi",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("e1aa929c-928d-4b3e-8a43-03e49630b4c2"),
                            FullName = "Doris Lessing",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("ee74589f-be60-45af-b0e2-ba324f1479f7"),
                            FullName = "Astrid Lindgren",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("38faa530-09c5-45ed-8120-7cad1f3da2af"),
                            FullName = "Lu Xun",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("32ee9267-8bed-401d-8f04-29fca9f27982"),
                            FullName = "Naguib Mahfouz",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("61e4d82e-9884-4ef3-9e32-b12b331072c3"),
                            FullName = "Thomas Mann",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("3512d0c8-c7de-49b1-990c-6048a08db9ae"),
                            FullName = "Herman Melville",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("6c039d83-3daf-4fff-b345-8140dd3bac9a"),
                            FullName = "Michel de Montaigne",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("70e51876-1710-4860-9857-0bb2e9904cc4"),
                            FullName = "Elsa Morante",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("a3933b58-da2f-4d9e-ac1b-971406f490ab"),
                            FullName = "Toni Morrison",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("2cd4eab2-904a-4261-bb1a-e7d4c983f99c"),
                            FullName = "Murasaki Shikibu",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("fcd666e4-33e4-4929-9e32-9089b4d75347"),
                            FullName = "Robert Musil",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("2502f281-4153-411d-8919-7b12e9db42be"),
                            FullName = "Vladimir Nabokov",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("4d37e72b-5cc1-47a7-a537-88b67be5e5b5"),
                            FullName = "George Orwell",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("77889f64-1fb7-4a68-9ced-0661b24b9ecc"),
                            FullName = "Ovid",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("bc9cf5b3-e5aa-4e00-a57b-28e4155950d6"),
                            FullName = "Fernando Pessoa",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("74badb95-e1b4-4a93-b808-a7196b2f1ec0"),
                            FullName = "Edgar Allan Poe",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("e9594109-079c-4ac7-b67b-65bcd2a52497"),
                            FullName = "Marcel Proust",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("8fb2fb8b-50b3-40da-9a5f-74f531458cc0"),
                            FullName = "François Rabelais",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("10bacfde-3d47-479e-9460-1e149379ab24"),
                            FullName = "Juan Rulfo",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("0f90941f-bcc4-4d12-a297-60f626ae9959"),
                            FullName = "Rumi",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("ebe93f0f-3dba-4b94-808c-6f9606b6a06f"),
                            FullName = "Salman Rushdie",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("29a77734-8c17-4b32-a843-4c07c652bf50"),
                            FullName = "Saadi",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("8747d54d-028a-491c-8afe-ddd00881fc94"),
                            FullName = "Tayeb Salih",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("52a260da-0881-4207-89f8-fb47d4d5e0a5"),
                            FullName = "José Saramago",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("9d866759-0a3a-4076-bc1d-1d39e7accbfe"),
                            FullName = "William Shakespeare",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("b5eb741e-352b-448d-a96c-6dc42387ef90"),
                            FullName = "Sophocles",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("ae927ed3-5eab-451c-8615-9d358e5f6796"),
                            FullName = "Stendhal",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("440bc913-e0c1-45c0-a517-0e7f30066d7a"),
                            FullName = "Laurence Sterne",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("412fecf6-6740-4091-bba9-d59c3941c01e"),
                            FullName = "Italo Svevo",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("29efd3c9-42f5-4d95-9a12-061aae946552"),
                            FullName = "Jonathan Swift",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("8c44ee9a-ff60-4a6d-aca9-763e5ff321a0"),
                            FullName = "Leo Tolstoy",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("87566daa-3dfc-4bf9-bfab-0eee380797c6"),
                            FullName = "Mark Twain",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("79623f65-bc2e-4457-b2c5-727e3692ce4c"),
                            FullName = "Valmiki",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("6a4e2654-ad55-4d6b-b19d-86ca3dac4623"),
                            FullName = "Virgil",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("2396856b-a432-46b0-ac81-18158d8469e7"),
                            FullName = "Vyasa",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("4ca1b43b-d451-4332-b75e-c6acd00b5bf9"),
                            FullName = "Walt Whitman",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("1be273be-802e-4401-a0ed-d060ecb0b2b8"),
                            FullName = "Virginia Woolf",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("e7a3a8a2-2fb9-4e0f-85ce-bfe681322224"),
                            FullName = "Marguerite Yourcenar",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("bfcfc8fe-b67c-42a0-9feb-e0ded4ec4cfb"),
                            FullName = "J.R.R. Tolkien",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        },
                        new
                        {
                            Id = new Guid("69a54e30-11cd-495c-a222-2b0fd492b8a4"),
                            FullName = "J.K. Rowling",
                            IsDeleted = false,
                            IsSubmittedByUser = false
                        });
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float")
                        .HasComment("Average rating based on users' ratings");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Book description");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasComment("Book cover image");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmittedByUser")
                        .HasColumnType("bit");

                    b.Property<int?>("PublicationYear")
                        .HasColumnType("int")
                        .HasComment("Official known first publication year of the book");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Full title of the book");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookApplicationUser", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("User's favourite character from the book - optional");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2")
                        .HasComment("Date on which the user added the book to a reading list");

                    b.Property<DateTime?>("DateFinished")
                        .HasColumnType("datetime2")
                        .HasComment("Date on which the user finished reading");

                    b.Property<DateTime?>("DateStarted")
                        .HasColumnType("datetime2")
                        .HasComment("Date on which the user started reading");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int")
                        .HasComment("Optional user rating");

                    b.Property<int>("ReadingStatusId")
                        .HasColumnType("int")
                        .HasComment("Current reading status");

                    b.HasKey("BookId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("RatingId");

                    b.HasIndex("ReadingStatusId");

                    b.ToTable("BooksApplicationUsers");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookCharacter", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("BooksCharacters");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmittedByUser")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Full name of the character");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the genre");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Quote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The book the quote is from");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasComment("The body of the quote");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation in the database");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.QuoteApplicationUser", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuoteId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("QuotesApplicationUsers");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key and numeric value of the rating");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RatingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Descriptive value of the rating");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatingDescription = "Barely finished it, if at all"
                        },
                        new
                        {
                            Id = 2,
                            RatingDescription = "Not much to enjoy/ learn"
                        },
                        new
                        {
                            Id = 3,
                            RatingDescription = "Good parts are good, bad parts are bad"
                        },
                        new
                        {
                            Id = 4,
                            RatingDescription = "Would definitely recommend/ reread"
                        },
                        new
                        {
                            Id = 5,
                            RatingDescription = "Absolutely amazing"
                        });
                });

            modelBuilder.Entity("BookPlatform.Data.Models.ReadingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key and numeric value of the status");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Descriptive value of the status");

                    b.HasKey("Id");

                    b.ToTable("ReadingStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusDescription = "Read"
                        },
                        new
                        {
                            Id = 2,
                            StatusDescription = "Currently Reading"
                        },
                        new
                        {
                            Id = 3,
                            StatusDescription = "Want to Read"
                        });
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The user who created the review");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The book the review is about");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("The body of the review");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of creation in the database");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasComment("Number of likes");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date of last modification in the database");

                    b.HasKey("Id");

                    b.HasIndex("BookId", "ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserApplicationUser", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Book", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookApplicationUser", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserBooks")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Book", "Book")
                        .WithMany("BookApplicationUsers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Character", "Character")
                        .WithMany("CharacterBookApplicationUsers")
                        .HasForeignKey("CharacterId");

                    b.HasOne("BookPlatform.Data.Models.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.HasOne("BookPlatform.Data.Models.ReadingStatus", "ReadingStatus")
                        .WithMany()
                        .HasForeignKey("ReadingStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Book");

                    b.Navigation("Character");

                    b.Navigation("Rating");

                    b.Navigation("ReadingStatus");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookCharacter", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.Book", "Book")
                        .WithMany("BookCharacters")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Character", "Character")
                        .WithMany("CharacterBooks")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Quote", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.Book", "Book")
                        .WithMany("Quotes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.QuoteApplicationUser", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserQuotes")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.Quote", "Quote")
                        .WithMany("QuoteApplicationUsers")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Review", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.BookApplicationUser", "BookApplicationUser")
                        .WithOne("Review")
                        .HasForeignKey("BookPlatform.Data.Models.Review", "BookId", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BookPlatform.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPlatform.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserBooks");

                    b.Navigation("UserQuotes");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Book", b =>
                {
                    b.Navigation("BookApplicationUsers");

                    b.Navigation("BookCharacters");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.BookApplicationUser", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Character", b =>
                {
                    b.Navigation("CharacterBookApplicationUsers");

                    b.Navigation("CharacterBooks");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookPlatform.Data.Models.Quote", b =>
                {
                    b.Navigation("QuoteApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
